// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    members       Member[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
    id         String   @id @default(cuid())
    name       String
    userId     String
    inviteCode String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    members    Member[]
}

enum MemberRole {
    ADMIN
    MEMBER
}

model Member {
    id        String     @id @default(cuid())
    projectId String
    userId    String
    role      MemberRole
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
    TODO
    INPROGRESS
    INREVIEW
    DONE
}

enum TaskPriority {
    LOW
    MEDIUM
    HIGH
}

model Task {
    id          String       @id @default(cuid())
    title       String
    description String?
    projectId   String
    status      TaskStatus   @default(TODO)
    priority    TaskPriority @default(LOW)
    dueDate     DateTime
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}
